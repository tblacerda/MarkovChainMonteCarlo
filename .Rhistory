pbinom(q=1, size=5, prob=0.6)
qbinom(p=0.08704, size=5, prob=0.6)
qexp(p=c(0.1,0.9), rate=1)
library(readxl)
library(dplyr)
library(lubridate)
?lubridate
library(rjags)
install.packages("rjags")
install.packages("rjags")
install.packages("C:/Users/F8058552/Downloads/rjags_4-17.zip", repos = NULL, type = "win.binary")
library(rjags)
install.packages("C:/Users/F8058552/Downloads/coda_0.19-4.1.zip", repos = NULL, type = "win.binary")
library(rjags)
library(runjags)
library(ggplot2)
install.packages("runjags")
install.packages("C:/Users/F8058552/Downloads/runjags_2.2.2-5.zip", repos = NULL, type = "win.binary")
library(writexl)
library(purrr)
library(progress)
# Carregar o pacote
library(rjags)
# Modelo de exemplo
modelo <- "model {
Y ~ dpois(lambda)
lambda ~ dexp(1)
}"
writeLines(modelo, "modelo_teste.jags")
# Executar o modelo
dados <- list(Y = 5)
jags <- jags.model("modelo_teste.jags", data = dados)
update(jags, 1000)
amostras <- coda.samples(jags, "lambda", n.iter = 1000)
# Ver resultados
summary(amostras)
library(coda)
gelman.diag(amostras)  # Verificar convergência
library(readxl)
library(dplyr)
library(lubridate)
install.packages("rjags")
library(rjags)
library(runjags)
library(writexl)
library(purrr)
library(progress)
install.packages("rjags")
install.packages("rjags")
install.packages("rjags")
library(rjags)
detach("package:rjags", unload = TRUE)
library(rjags)
library(readxl)
library(dplyr)
library(lubridate)
install.packages("rjags")
library(rjags)
library(runjags)
library(writexl)
library(purrr)
library(progress)
install.packages("progress")
library(readxl)
library(dplyr)
library(lubridate)
install.packages("rjags")
library(rjags)
library(runjags)
library(writexl)
library(purrr)
install.packages("tidyverse")
install.packages("rtools")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("profvis")
.libPaths()
install.packages("profvis")
chooseCRANmirror()
chooseCRANmirror()
chooseCRANmirror()
chooseCRANmirror()
chooseCRANmirror()
chooseCRANmirror()
options(repos = c(CRAN = "https://cloud.r-project.org"))
install.packages("profvis", type = "source")
install.packages("tidyverse", type = "source")
url <- "https://cloud.r-project.org"
tryCatch({
readLines(url, n = 1)
}, error = function(e) print(e))
install.packages(
c("arrow", "babynames", "curl", "duckdb", "gapminder",
"ggrepel", "ggridges", "ggthemes", "hexbin", "janitor", "Lahman",
"leaflet", "maps", "nycflights13", "openxlsx", "palmerpenguins",
"repurrrsive", "tidymodels", "writexl")
)
install.packages(
c("arrow", "babynames", "curl", "duckdb", "gapminder",
"ggrepel", "ggridges", "ggthemes", "hexbin", "janitor", "Lahman",
"leaflet", "maps", "nycflights13", "openxlsx", "palmerpenguins",
"repurrrsive", "tidymodels", "writexl")
)
install.packages(
c("arrow", "babynames", "curl", "duckdb", "gapminder",
"ggrepel", "ggridges", "ggthemes", "hexbin", "janitor", "Lahman",
"leaflet", "maps", "nycflights13", "openxlsx", "palmerpenguins",
"repurrrsive", "tidymodels", "writexl")
)
install.packages("tidyverse"
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("C:/Users/F8058552/Downloads/tidyverse_2.0.0.zip", repos = NULL, type = "win.binary")
library(tidyverse)
library(tidyverse)
library(lubridate)
library(rjags)
library(lubridate)
library(tidyverse)
library(lubridate)
library(rjags)
library(progressr)
library(progressr)
library(runjags)
library(writexl)
library(furrr)
library(furrr)
library(runjags)
library(tidyverse)
library(lubridate)
library(rjags)
library(runjags)
library(tidyverse)
install.packages("runjags")
library(tidyverse)
library(lubridate)
library(rjags)
library(readxl)
library(dplyr)
library(rjags)
library(coda)
library(tidybayes)
library(tidyr)
library(HDInterval)
library(writexl)
# Carregar e filtrar dados
data <- read_excel("DADOS BRUTOS/ECQ_OUT_24.xlsx", sheet = "Export") %>%
filter(ANF == 83) %>%
mutate(TESTES_ECQ_OK = round(TESTES_ECQ * ECQ, 0))  # Recriar a variável resposta
setwd("C:/Users/F8058552/OneDrive - TIM/__Automacao_de_tarefas/Projetos_em_python/MCMC")
# Carregar e filtrar dados
data <- read_excel("DADOS BRUTOS/ECQ_OUT_24.xlsx", sheet = "Export") %>%
filter(ANF == 83) %>%
mutate(TESTES_ECQ_OK = round(TESTES_ECQ * ECQ, 0))  # Recriar a variável resposta
# Criar IDs únicos para grupos (agora só ANF 83)
data <- data %>%
group_by(ANF, MUNICIPIO) %>%
mutate(group_id = cur_group_id()) %>%
ungroup()
# Mapeamento de grupos para ANF (só 1 ANF agora)
group_df <- data %>%
distinct(group_id, ANF) %>%
arrange(group_id)
jags_data <- list(
N_group = max(data$group_id),
N_sites = nrow(data),
group_per_site = data$group_id,  # Vetor de grupos por site
n_tests = data$TESTES_ECQ,       # Vetor de testes
n_success = data$TESTES_ECQ_OK   # Vetor de sucessos
)
model_string <- "
model {
# Hiperparâmetros globais
mu_global ~ dbeta(2, 2)
sigma_global ~ dgamma(2, 0.1)  # Prior Gamma mais informativa
# Parâmetros ANF com restrição
alpha_anf <- mu_global * sigma_global + 0.1  # Evitar alpha/beta <= 0
beta_anf <- (1 - mu_global) * sigma_global + 0.1
mu_anf ~ dbeta(alpha_anf, beta_anf)
# Priors para dispersão
phi_municipio ~ dgamma(2, 0.1)  # Gamma mais suave
phi_site ~ dgamma(2, 0.1)
# Loop por municípios
for(g in 1:N_group) {
a_municipio[g] <- mu_anf * phi_municipio + 0.1  # +0.1 para estabilidade
b_municipio[g] <- (1 - mu_anf) * phi_municipio + 0.1
mu_municipio[g] ~ dbeta(a_municipio[g], b_municipio[g])
}
# Loop por sites
for(s in 1:N_sites) {
logit_mu_site[s] <- logit(mu_municipio[group_per_site[s]])
theta_site[s] <- ilogit(logit_mu_site[s] + epsilon[s])
epsilon[s] ~ dnorm(0, 1/phi_site)
n_success[s] ~ dbin(theta_site[s], n_tests[s])
}
}
"
inits <- function() {
list(
mu_global = rbeta(1, 2, 2),
sigma_global = rgamma(1, 2, 0.1),  # Coerente com o prior
phi_municipio = rgamma(1, 2, 0.1),
phi_site = rgamma(1, 2, 0.1),
mu_anf = rbeta(1, 2, 2)  # Inicialização direta
)
}
model <- jags.model(
textConnection(model_string),
data = jags_data,
inits = inits,
n.chains = 4,
n.adapt = 5000  # Aumentar fase de adaptação
)
samples <- coda.samples(
model,
variable.names = c("mu_anf", "mu_municipio", "theta_site"),
n.iter = 10000,
thin = 5
)
# Verificar convergência
gelman.diag(samples)
# Verificar convergência
gelman.diag(samples)
effectiveSize(samples)
#traceplot(samples)
raftery.diag(samples) #para saber a quantidade de samples
# Analisar resultados
summary(samples)
group_map <- data %>%
distinct(group_id, ANF, MUNICIPIO)
# 2. Extrair estatísticas dos municípios
municipio_stats <- samples %>%
spread_draws(mu_municipio[group_id]) %>%
group_by(group_id) %>%
summarise(
mean_municipio = mean(mu_municipio),
stddev_municipio = sd(mu_municipio),
hdi_inf_Mun = hdi(mu_municipio, credMass = 0.95)[1],
hdi_sup_Mun = hdi(mu_municipio, credMass = 0.95)[2]
) %>%
left_join(group_map, by = "group_id")
library(tidyverse)
# 1. Mapear group_id para ANF e Município
group_map <- data %>%
distinct(group_id, ANF, MUNICIPIO)
# 2. Extrair estatísticas dos municípios
municipio_stats <- samples %>%
spread_draws(mu_municipio[group_id]) %>%
group_by(group_id) %>%
summarise(
mean_municipio = mean(mu_municipio),
stddev_municipio = sd(mu_municipio),
hdi_inf_Mun = hdi(mu_municipio, credMass = 0.95)[1],
hdi_sup_Mun = hdi(mu_municipio, credMass = 0.95)[2]
) %>%
left_join(group_map, by = "group_id")
